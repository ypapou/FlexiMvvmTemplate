// <auto-generated />

using System;
using FlexiMvvm.Weak.Subscriptions;

namespace Company.App.Infrastructure.Connectivity
{
    /// <summary>Provides a set of static methods for weak subscriptions on <see cref="Company.App.Infrastructure.Connectivity.Connectivity"/> class events.</summary>
    public static class ConnectivityWeakEventSubscriptionExtensions
    {
        /// <summary>Weak subscription on <see cref="Company.App.Infrastructure.Connectivity.Connectivity.ConnectivityChanged"/> event.</summary>
        /// <returns>Weak event subscription instance.</returns>
        /// <param name="eventSource">The source of the event.</param>
        /// <param name="eventHandler">Represents the method that will handle the <see cref="Company.App.Infrastructure.Connectivity.Connectivity.ConnectivityChanged"/> event.</param>
        /// <exception cref="ArgumentNullException"><paramref name="eventSource" /> is null.-or-<paramref name="eventHandler" /> is null.</exception>
        public static IDisposable ConnectivityChangedWeakSubscribe(
            this Company.App.Infrastructure.Connectivity.Connectivity eventSource,
            EventHandler<Xamarin.Essentials.ConnectivityChangedEventArgs> eventHandler)
        {
            if (eventSource == null)
                throw new ArgumentNullException(nameof(eventSource));
            if (eventHandler == null)
                throw new ArgumentNullException(nameof(eventHandler));

            return new EventHandlerWeakEventSubscription<Company.App.Infrastructure.Connectivity.Connectivity, Xamarin.Essentials.ConnectivityChangedEventArgs>(
                eventSource,
                (source, handler) => source.ConnectivityChanged += handler,
                (source, handler) => source.ConnectivityChanged -= handler,
                eventHandler);
        }

    }
}

